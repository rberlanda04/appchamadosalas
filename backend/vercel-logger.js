// Logger otimizado para ambiente serverless (Vercel)
// N√£o usa sistema de arquivos local, apenas console

class VercelLogger {
  constructor() {
    this.isServerless = true;
  }

  formatTimestamp() {
    return new Date().toISOString();
  }

  formatMessage(level, message, data = {}) {
    const timestamp = this.formatTimestamp();
    const dataStr = Object.keys(data).length > 0 ? JSON.stringify(data) : '';
    return `[${timestamp}] ${level}: ${message} ${dataStr}`;
  }

  info(message, data = {}) {
    const logMessage = this.formatMessage('INFO', message, data);
    console.log(`‚ÑπÔ∏è  ${logMessage}`);
  }

  error(message, data = {}) {
    const logMessage = this.formatMessage('ERROR', message, data);
    console.error(`‚ùå ${logMessage}`);
  }

  warn(message, data = {}) {
    const logMessage = this.formatMessage('WARN', message, data);
    console.warn(`‚ö†Ô∏è  ${logMessage}`);
  }

  debug(message, data = {}) {
    // Em produ√ß√£o serverless, debug s√≥ vai para console em desenvolvimento
    if (process.env.NODE_ENV !== 'production') {
      const logMessage = this.formatMessage('DEBUG', message, data);
      console.log(`üêõ ${logMessage}`);
    }
  }

  // M√©todos espec√≠ficos para logging de entidades
  logChamado(action, chamado) {
    const message = `CHAMADO_${action}: ID=${chamado.id}, T√≠tulo=${chamado.titulo || 'N/A'}, Status=${chamado.status_id || 'N/A'}`;
    this.info(message, { chamado });
  }

  logSala(action, sala) {
    const message = `SALA_${action}: ID=${sala.id}, Nome=${sala.nome || 'N/A'}, Ativa=${sala.ativa || 'N/A'}`;
    this.info(message, { sala });
  }

  logStatus(action, status) {
    const message = `STATUS_${action}: ID=${status.id}, Nome=${status.nome || 'N/A'}, Cor=${status.cor || 'N/A'}`;
    this.info(message, { status });
  }

  // M√©todos de arquivo n√£o funcionam em serverless - retornam dados em mem√≥ria
  saveData(data) {
    this.debug('Dados salvos em mem√≥ria (serverless)', { dataKeys: Object.keys(data) });
    // Em serverless, os dados s√£o mantidos apenas durante a execu√ß√£o
    this._memoryData = data;
  }

  loadData() {
    this.debug('Dados carregados da mem√≥ria (serverless)');
    return this._memoryData || null;
  }

  // M√©todos n√£o aplic√°veis em serverless
  createBackup() {
    this.debug('Backup n√£o dispon√≠vel em ambiente serverless');
  }

  cleanOldLogs() {
    this.debug('Limpeza de logs n√£o aplic√°vel em ambiente serverless');
  }
}

// Inst√¢ncia global do logger para Vercel
const logger = new VercelLogger();

module.exports = {
  logger
};